<?xml version="1.0" standalone="no"?> <!--*- mode: xml -*-->
<app-bundle>

  <meta>
    <!-- Where to pick up the GTK+ installation, icon themes,
         etc. Note that "${env:JHBUILD_PREFIX}" is evaluated to the
         value of the environment variable JHBUILD_PREFIX. You can
         define additional prefixes and refer to them in paths
         throughout this file on the form "${prefix:name}". This is
         useful for installing certain libraries or even the
         application itself separately. Note that JHBUILD_PREFIX is
         defined by jhbuild, so it you are not using jhbuild you can
         either define your own or just hardcode the path here.
    -->
    <prefix name="default">${env:JHBUILD_PREFIX}</prefix>

    <!-- The project directory is the default location of the created
         app. If you leave out the path, the current directory is
         used. Note the usage of an environment variable here again.
    -->
    <destination overwrite="yes">${env:HOME}/Desktop</destination>

    <image>
      <!-- Not implemented yet (DMG image). -->
    </image>

    <!-- Comment this out to keep the install names in binaries -->
    <run-install-name-tool/>

    <!-- Optionally specify a launcher script to use. If the
         application sets up everything needed itself, like
         environment variable, linker paths, etc, a launcher script is
         not needed. If the source path is left out, the default
         script will be used.
    -->
    <launcher-script>${project}/launcher.sh</launcher-script >

    <!-- Not implemented: Optional runtime, could be python or mono
         for example.
    -->
    <!-- runtime copy="yes">/usr/bin/python</runtime -->
    <!-- Indicate the active gtk version to use. This is needed only
         for gtk+-3.0 projects. -->
    <gtk>gtk+-2.0</gtk>
  </meta>

  <!-- The special macro "${project}" refers to the directory where
       this bundle file is located. The application name and bundle
       identifier are taken from the plist file.
  -->
  <plist>${project}/Info-gtkwave.plist</plist>

  <main-binary>${prefix}/bin/gtkwave</main-binary>

  <binary>${prefix}/bin/twinwave</binary>
  <binary>${prefix}/bin/evcd2vcd</binary>
  <binary>${prefix}/bin/fst2vcd</binary>
  <binary>${prefix}/bin/vcd2fst</binary>
  <binary>${prefix}/bin/lxt2miner</binary>
  <binary>${prefix}/bin/lxt2vcd</binary>
  <binary>${prefix}/bin/shmidcat</binary>
  <binary>${prefix}/bin/vcd2lxt</binary>
  <binary>${prefix}/bin/vcd2lxt2</binary>
  <binary>${prefix}/bin/vcd2vzt</binary>
  <binary>${prefix}/bin/vzt2vcd</binary>
  <binary>${prefix}/bin/vztminer</binary>
  <binary>${prefix}/bin/fstminer</binary>
  <binary>${prefix}/bin/rtlbrowse</binary>
  <binary>${prefix}/bin/xml2stems</binary>

  <data dest="${bundle}/Contents/Resources/bin/gtkwave_bin_launcher.sh">
    ${project}/gtkwave_bin_launcher.sh
  </data>


  <!-- Copy in GTK+ modules.  Note the ${gtkdir} macro, which expands
       to the correct library subdirectory for the specified gtk
       version.
  -->
  <binary>
     ${prefix}/lib/${gtkdir}/modules/*.so
  </binary>

  <binary>
     ${prefix}/lib/gdk-pixbuf-2.0/*
  </binary>

  <binary>
     ${prefix}/lib/gtk-2.0/*
  </binary>


  <!-- Copy in GTK+ theme engines. Note the use of the
       "${pkg:module:variable}" macro, which evaluates to a pkg-config
       variable in the specified module. Note that any libraries that
       binaries link to are also copied in automatically.  Note also
       the included ${gtk} macro, which gets the correct package name
       to get. -->
  <binary>
    ${prefix}/lib/${gtkdir}/${pkg:${gtk}:gtk_binary_version}/engines/*.so
  </binary>

  <!-- Translation filenames, one for each program or library that you
       want to copy in to the bundle. The "dest" attribute is
       optional, as usual. Bundler will find all translations of that
       library/program under the indicated directory and copy them.-->
  <translations name="gtk20">
    ${prefix}/share/locale
  </translations>


  <!-- Data to copy in, usually Glade/UI files, images, sounds files
       etc. The destination inside the bundle can be specified if the
       files should end up at a different location, by using the
       "dest" property. The destination must then start with the macro
       "${bundle}", which refers to the bundle root directory.
  -->
  <!-- data>
    ${prefix}/share/gtkwave
  </data -->

  <!-- Copy in the themes data. You may want to trim this to save space
       in your bundle. -->
  <data>
    ${prefix}/share/themes
  </data>



  <data dest="${bundle}/Contents/Resources/gtkwave.icns">
    ${project}/gtkwave.icns
  </data>
  <data dest="${bundle}/Contents/Resources/gtkwave_files.icns">
    ${project}/gtkwave_files.icns
  </data>
  <data dest="${bundle}/Contents/Resources/gtkwave_savefiles.icns">
    ${project}/gtkwave_savefiles.icns
  </data>

  <!-- This is where theme commands go. You can copy them in from your
       theme of choice if they provide and example, or you can just
       change the source path. -->

  <data dest="${bundle}/Contents/Resources/etc/${gtkdir}/gtkrc">
    ${project}/gtkrc
  </data>

  <!-- Icon themes to copy. The "icons" property can be either of
       "auto", "all", or "none". All or none should be
       self-explanatory, while auto means that the script will try to
       figure out which icons are needed. This is done by getting all
       the strings from all copied binaries, and matching them against
       icon names. To be safe, you should use "all". "none" is useful
       if you want just the index.theme file but no icons, mostly
       needed for the "hicolor" base theme.
  >
  <icon-theme icons="auto">
    Tango
  </icon-theme -->


  <!-- Copy in the shell launcher script. -->
  <data dest="${bundle}/Contents/Resources/bin/gtkwave">
    ${project}/gtkwave.pl
  </data>


  <!-- man pages and other documentation
    -->
  <data dest="${bundle}/Contents/Resources/man/evcd2vcd.1">
    ${project}/../../man/evcd2vcd.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/fst2vcd.1">
    ${project}/../../man/fst2vcd.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/gtkwave.1">
    ${project}/../../man/gtkwave.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/gtkwaverc.5">
    ${project}/../../man/gtkwaverc.5
  </data>
  <data dest="${bundle}/Contents/Resources/man/lxt2miner.1">
    ${project}/../../man/lxt2miner.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/lxt2vcd.1">
    ${project}/../../man/lxt2vcd.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/rtlbrowse.1">
    ${project}/../../man/rtlbrowse.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/shmidcat.1">
    ${project}/../../man/shmidcat.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/twinwave.1">
    ${project}/../../man/twinwave.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/vcd2fst.1">
    ${project}/../../man/vcd2fst.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/vcd2lxt.1">
    ${project}/../../man/vcd2lxt.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/vcd2lxt2.1">
    ${project}/../../man/vcd2lxt2.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/vcd2vzt.1">
    ${project}/../../man/vcd2vzt.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/vzt2vcd.1">
    ${project}/../../man/vzt2vcd.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/vztminer.1">
    ${project}/../../man/vztminer.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/fstminer.1">
    ${project}/../../man/fstminer.1
  </data>
  <data dest="${bundle}/Contents/Resources/man/xml2stems.1">
    ${project}/../../man/xml2stems.1
  </data>
  <data dest="${bundle}/Contents/Resources/doc/gtkwave.odt">
    ${project}/../../doc/gtkwave.odt
  </data>
  <data dest="${bundle}/Contents/Resources/doc/gtkwave.pdf">
    ${project}/gtkwave.pdf
  </data>


  <!-- Misc text files
    -->
  <data dest="${bundle}/Contents/Resources/LICENSE.TXT">
    ${project}/../../LICENSE.TXT
  </data>
  <data dest="${bundle}/Contents/Resources/COPYING">
    ${project}/../../COPYING
  </data>


  <!-- Examples files
    -->
  <data dest="${bundle}/Contents/Resources/examples/des.fst">
    ${project}/../../examples/des.fst
  </data>
  <data dest="${bundle}/Contents/Resources/examples/des.gtkw">
    ${project}/../../examples/des.gtkw
  </data>
  <data dest="${bundle}/Contents/Resources/examples/gtkwaverc">
    ${project}/../../examples/gtkwaverc
  </data>

  <data dest="${bundle}/Contents/Resources/examples/transaction.fst">
    ${project}/../../examples/transaction.fst
  </data>
  <data dest="${bundle}/Contents/Resources/examples/transaction.gtkw">
    ${project}/../../examples/transaction.gtkw
  </data>
  <data dest="${bundle}/Contents/Resources/examples/transaction.c">
    ${project}/../../examples/transaction.c
  </data>
  <data dest="${bundle}/Contents/Resources/examples/transaction">
    ${project}/../../examples/transaction
  </data>

  <!-- Empty config file
    -->
  <data dest="${bundle}/Contents/Resources/gtkwaverc">
    ${project}/gtkwaverc
  </data>


  <!-- Copy in the patches so users can recreate gtk from source.
       This might be obsolete in future versions of gtk.
       See bug #664894.
    -->
  <data dest="${bundle}/Contents/Resources/share/patches/gtk_diff_against_modulesets.patch">
    ${project}/gtk_diff_against_modulesets.patch
  </data>

  <!-- Copy in the patches so users can recreate gtk from source.
       This might be obsolete in future versions of gtk.
       No bug reported yet: this fixes yellow bars from gdk_pixbuf_get_from_drawable()
       which invokes _gdk_quartz_image_copy_to_image() that attempts to use 24-bit
       RGB pixels instead of 32-bit RGBA ones.
    -->
  <data dest="${bundle}/Contents/Resources/share/patches/gtk_diff_against_modulesets_2.patch">
    ${project}/gtk_diff_against_modulesets_2.patch
  </data>


</app-bundle>
